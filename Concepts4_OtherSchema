#
#
#
#
#

Partitions：
 好处：
  1.提高可用性。查询优化器自动移除未引用的分区，查询时不影响分区不可用
  2.易于管理模式对象。DDL可以操作一个分区而不是整张表或者索引，删除分区可以避免删除大量的行。
  3.减少OLTP中资源争用的问题。分区表是每个分区都占一个段，DML分布在许多段中而不是一个段。
  4.数据仓库中查询性能的提高。
  
分区策略：
 range：
 CREATE TABLE time_range_sales
   ( prod_id        NUMBER(6)
   , cust_id        NUMBER
   , time_id        DATE
   , channel_id     CHAR(1)
   , promo_id       NUMBER(6)
   , quantity_sold  NUMBER(3)
   , amount_sold    NUMBER(10,2)
   )
PARTITION BY RANGE (time_id)
 (PARTITION SALES_1998 VALUES LESS THAN (TO_DATE('01-JAN-1999','DD-MON-YYYY')),
  PARTITION SALES_1999 VALUES LESS THAN (TO_DATE('01-JAN-2000','DD-MON-YYYY')),
  PARTITION SALES_2000 VALUES LESS THAN (TO_DATE('01-JAN-2001','DD-MON-YYYY')),
  PARTITION SALES_2001 VALUES LESS THAN (MAXVALUE)
 ); 
 
 
 list：
 CREATE TABLE list_sales
   ( prod_id        NUMBER(6)
   , cust_id        NUMBER
   , time_id        DATE
   , channel_id     CHAR(1)
   , promo_id       NUMBER(6)
   , quantity_sold  NUMBER(3)
   , amount_sold    NUMBER(10,2)
   )
PARTITION BY LIST (channel_id)
 (PARTITION even_channels VALUES (2,4),
  PARTITION odd_channels VALUES (3,9)
 ); 
 
 
 hash：
 CREATE TABLE hash_sales
   ( prod_id        NUMBER(6)
   , cust_id        NUMBER
   , time_id        DATE
   , channel_id     CHAR(1)
   , promo_id       NUMBER(6)
   , quantity_sold  NUMBER(3)
   , amount_sold    NUMBER(10,2)
   )
PARTITION BY HASH (prod_id)
PARTITIONS 2; 
 
 如果改变分区的数量，那么数据库将重新分配数据。
 即使分区表只有一个分区，也跟普通表不同，因为分区表可以增加分区，而普通表不可以。
 分区表的每一个分区都独占一个段。
 表的压缩属性可以为表空间，表，表分区声明。
 
 分区索引：
  local partition index：
   局部分区索引，只索引该分区。局部分区索引的优点是增加可用性和便于维护。可用性增加是因为只要维护该分区，便于维护是因为当移动分区时，必须要重建或者维护关联的本地索引，
   CREATE INDEX hash_sales_idx ON hash_sales(time_id) LOCAL;
   hash_sales 有两个分区，创建局部分区索引时，hash_sales_idx也会有两个分区。
   不可以只给一个分区建立局部索引，只有新增一个分区时，分区索引才会添加到局部分区索引中。同样删除时也是。
   不可以为全局索引建立bitmap索引。
   局部分区索引又分为：
     local prefixed index： 局部前缀索引 
      分区键作为索引定义的第一列  当查询条件能用到该索引时，能产生分区消除。
     local noprefixed index: 局部非前缀索引
       分区键不作为索引定义的第一列 可能不会产生分区消除。
 
 globale partition index：
   全局分区索引，
 CREATE INDEX time_channel_sales_idx ON time_range_sales (channel_id)
   GLOBAL PARTITION BY RANGE (channel_id) --这里一定是channel_id
      (PARTITION p1 VALUES LESS THAN (3),
       PARTITION p2 VALUES LESS THAN (4),
       PARTITION p3 VALUES LESS THAN (MAXVALUE));
  全局分区索引的索引键不一定是分区键，但是索引分区键一定要是索引定义的第一列。索引分区可能指向分区表的几个分区，没有一一对应关系。     
  
 compisite：
 
 
 Views：
 用处：
  1.通过对表的限制，提高安全级别。
  2.隐藏数据的复杂性。
  3.从基表的不同角度展现数据。
  4.从基表的定义变更中隔离应用程序。
  
  特征：
  1.不占存储空间。
  2.是定义在数据字典中的。
  
  数据如何访问视图：
   将用户的查询语句与视图的语句相合并。
   
 Materialized Views(物化视图):
  它是用于预先计算并保存表连接或聚集等耗时较多的操作的结果，这样，在执行查询时，就可以避免进行这些耗时的操作，从而快速的得到结果.
  物化视图需要存储空间，即使基表删除了，物化视图还能查询。跟没物化的视图很像，都是存储查询的，但是视图不需要存储空间。
  1、创建方式（Build Methods）：Build Immediate 和Build Deferred两种。
     Build Immediate 是在创建物化视图的时候就生成数据，而Build Deferred则在创建时不生成数据，以后根据需要再生成数据。默认为Build Immediate 。
  2、查询重写（Query Rewrite）：Enable Query Rewrite和Disable Query Rewrite两种。分别指出创建的物化视图是否支持查询重写。
    查询重写是指当对物化视图的基表进行查询时，Oracle会自动判断能否通过查询物化视图来得到结果，
    如果可以，则避免了聚集或连接操作，而直接从已经计算好的物化视图中读取数据。默认为Disable Query Rewrite。
  3、刷新（Refresh）：指当基表发生了DML操作后，物化视图何时采用哪种方式和基表进行同步。
     刷新的模式有两种：On Demand和On Commit。
     On Demand指物化视图在用户需要的时候进行刷新，可以手工通过DBMS_MVIEW.REFRESH等方法来进行刷新，也可以通过JOB定时进行刷新。
     On Commit指物化视图在对基表的DML操作提交的同时进行刷新。
     刷新的方法有四种：Fast 、Complete 、Force和Never。
     Fast 刷新采用增量刷新，只刷新自上次刷新以后进行的修改。
     Complete 刷新对整个物化视图进行完全的刷新。
     如果选择Force方式，则Oracle在刷新时会去判断是否可以进行快速刷新，如果可以则采用FAST方式，否则采用Complete 的方式。
     Never指物化视图不进行任何刷新。默认值是Force On Demand。 
     在建立物化视图的时候可以指定Order by 语句，使生成的数据按照一定的顺序进行保存。不过这个语句不会写入物化视图的定义中，而且对以后的刷新也无效。
  4、物化视图日志：如果需要进行快速刷新，则需要建立物化视图日志。物化视图日志根据不同物化视图的快速刷新的需要，可以建立为RowID或Primary Key类型的。
     还可以选择是否包括Sequence、Including New Values以及指定列的列表。
     可以指明On PreBuild Table语句将物化视图建立在一个已经存在的表上。
     这种情况下，物化视图和表必须同名。当删除物化视图时，不会删除同名的表。
     这种物化视图的查询重写要求参数Query_Rewrite_integerity必须设置为 trusted或者stale_tolerated。
  5、物化视图可以进行分区。而且基于分区的物化视图可以支持分区变化跟踪（PCT）。
     具有这种特性的物化视图，当基表进行了分区维护操作后，仍然可以进行快速刷新操作。
     对于聚集物化视图，可以在Group by 列表中使用Cube或RollUp，来建立不同等级的聚集物化视图。
 
Sequence(序列)：
 create sequence test_seq
 start with 1
 increment by 1
 nocycle
 nocache
 
 序列不一定是连续的。
 
 
Synonyms(同义词):
 同义词是模式对象的别名。不花费存储空间。可以为表，视图，序列，PL/SQL或者另一个同义词等建立。
 如果底层对象重命名或者移动，那么需要重建同义词。
 同义词可以创建私有或者共有的。私有的是只有该对象可以使用，共有的是所有模式对象都可以使用。
 在一个数据库中不能存在两个同名的同义词。
 
 
