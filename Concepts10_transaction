#
#
#
#
#


事务的特性(ACID)
 A：原子性，不可分割
 C：一致性。
 I：隔离性
 D：持久性

事务的开始与结束。
 开始于DML语句.
 结束于commit,rollback.或者DDL语句


SCN: system change number 是不重复递增序列
 在修改之前先记录SCN，避免不必要的重做。

事务名称：
 SET TRANSACTION NAME '...';--必须在整个事务的一开始定义事务名称。
 好处：
  1.比较容易监视长时间的事务和解决分布式事务中的问题。
  2.可以在应用程序中查看事务名称和id
  3.可以使用logminer搜索重做日志中的事务。
  4.用名称在V$TRANSACITON找到相关信息。
  
 active transaction:（活跃事务）事务开始，在提交或者回退之前都是活跃的。
  事务结束之前，数据的变化：
   1.在SGA中生成撤销数据。
   2.在redo file log 中生成重做信息。
   3.修改的数据会被存到DB BUFFER中，在commit之后，数据会写到磁盘。
   4.修改行会被锁定。
 
 savepoints：
  把长事务划分成几个小的。
  rollback to savepoint 发生的事：
   1.只将savepoint之后的语句rollback
   2.所有的子savepoint将会丢失
   3.会释放相关的锁
  
 Enqueued Transactions（排队事务）:
  session1改emp中jane的sal，在没提交或者rollback之前，这时session2也改这个人的sal，就会发生阻塞，session2就是排队事务。
  
rollback：
 1.根据相关的undo段，还原数据
 2.释放所有相关的锁
 3.擦除所有的savepoint
 4.结束事务
 
commit：
 1.产生一个SCN
 2.lgwr将log写进online redo log
 3.释放锁
 4.擦除所有的savepoint
 5.commit清除
 6.结束事务
 commit的时间长短与修改的内容的多少无关，跟lgwr的磁盘I/O有关。   
   

Autonomous Transactions(自治事务)：
 是与主事务划分开的独立事务。就是不管主事务是否成功与否，都会执行子事务。
 特征：
 1.不会见到主事务中未提交的变化和不与主事务共享锁及资源。
 2.自治事务只要提交了，其他事务就可以看见，跟主事务提交与否无关。
 3.自治事务可以调用其他自治事务。
 4.当进入自治程序时，主程序暂停，当自治程序结束时，主程序恢复。
 
Distributed Transactions(分布式事务)：
 database link:一个数据库实例连接到另一个数据库实例时，使用的就是db link
 
Two-Phase Commit (2pc):
 在多个数据库之间的两阶段提交中，一个数据库协调分布式事务。发起节点称为全局协调器。
 协调员询问其他数据库是否准备提交。如果任何数据库响应为NO，则整个事务回滚。
 如果所有数据库都投票赞成，则协调器广播一条消息，使每个数据库上的提交永久。
 两阶段提交机制对发布分布式事务的用户是透明的。事实上，用户甚至不需要知道事务是分布式的。
 表示事务结束的提交语句会自动触发两阶段提交机制。不需要编码或复杂语句语法，以在数据库应用程序的主体中包含分布式事务。
 
 In-Doubt Transactions:(有疑问的事务)
  当两阶段提交被任何类型的系统或网络故障中断时，会发生有疑问的分布式事务。
  例如，两个数据库报告他们准备提交的协调数据库，但协调数据库实例在收到消息后立即失效。准备提交的两个数据库现在被挂起，等待结果通知。
  
  该装置（RECO）后台进程会自动解决疑问的分布式事务的结果。
  当故障修复，通信恢复后，对所有参与节点的有疑问的分布式事务，每个局部数据库的恢复过程中自动提交或回滚。
  
  在长期失效的情况下，Oracle数据库使每个本地管理员能够手动提交或撤消由于故障而无法确定的有疑问的分布式事务。
  此选项允许本地数据库管理员释放由于长期失效而无限期锁定的任何锁定资源。
  
  如果必须将数据库恢复到过去的时间，那么数据库恢复设施将使其他站点的数据库管理员能够将数据库返回到较早的时间点，以确保全局数据库保持一致。
  
