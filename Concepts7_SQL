#
#
#
#
#


DDL:
 alter,create,drop
 turncate
 grant,revoke
 audit
 comment

事务：
 rollback可以结束事务，然而rollback to savepoint 不会结束事务。
 更改系统和更改会话语句不会隐式提交事务。(alter session /alter system)
 comment也是ddl语句，可以隐式提交。
 
Optimizer(cost-based optimizer) ：
 优化器通过考虑多个信息源，包括查询条件、可用访问路径、系统收集的统计数据和提示，确定哪种执行计划最有效。

对于一条sql优化器执行以下操作：
 1.评估表达式和条件
 2.检查完整性约束以了解更多数据并根据此元数据进行优化
 3.语句转换
 4.优化器目标选择
 5.选择访问路径  
 6.选择连接顺序
 
 可以不执行sql语句获得执行计划(解释计划)，只有在sql执行过后才能叫查询计划。
 
传递给优化器的是一个被解析完的语句。然后优化器做出以下操作：
 1.根据访问路径和提示(hint)生成一组潜在的执行计划。
 2.根据每个执行计划算出成本。成本是执行预期计划所需资源的使用率的比例。
 3.选择成本最低的，这个叫做查询计划。
 
 access paths:
   full table scans 会扫描所有块，只要在高水位线下的，哪怕是空的，也会扫描。
   rowid scans
   index scans
   cluster scans
   hash scans 

optimizer statistics:包括tables，columns，indexes，system的信息。
 使用DBMS_STATS包来修改，导入，导出，删除统计信息。
 
optimizer hints：
 select /*+ first_rows(25) */ name,id,salary form emp; --只查询前25行。
 
processes sql statement:
 1. syntax check
 2. semantic check
 3. shared pool check -- 检查是否存在该语句的hash值，不仅仅是检查语法相同，同一条sql不同用户执行，hash值也是不同的。
 软解析：可以重用该sql语句，又叫library cache hit.软解析优于硬解析因为，软解析跳过优化跟行选择直接执行。
 硬解析：oracle不能重用该sql。ddl都是硬解析。硬解析阶段，数据库访问library cache 和 data dictionary cache去检查元数据
 
sql row source generation:即执行计划
  包含的内容：
   1.An ordering of the tables referenced by the statement
     表的关联顺序
   2.An access method for each table mentioned in the statement
     每个表的访问方法
   3.A join method for tables affected by join operations in the statement
     关联方法
   4.Data operations such as filter, sort, or aggregation
     数据操作如，过滤，排序，聚集
     
如何处理DML
 1.读一致性
   使用undo 数据块保证读一致性。
 2.数据改变 
   使用undo 跟redo 来保证数据的一致性。
   
如何处理DDL：
 如create table test(id number);
 会执行下列相关的递归SQL:
 1.在执行create之前执行commit
 2.确认用户是否有权限
 3.确定表存放在哪个表空间中
 4.确定表空间的余额充足
 5.确定这个名字没有被使用
 6.将数据插入到数据字典中
 7.成功commit失败rollback
