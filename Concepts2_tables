#
#oracle 11g database concepts
#
#
#

查看表的建表语句：
select dbms_metadata.get_ddl('TABLE','a') from dual; 

1.table and table clusters
  1.1 schema objects(模式对象)
      一个用户拥有一个同名的模式对象。一个模式对象包含了该用户及相关数据。
      模式对象类型：table,index,partition,view,sequence,synonym,pl/sql 
      模式对象的存储：tables,indexes,partitions存储在segement(段)中,其他保存在元数据中，像view，sequence。
  当数据库创建时，会有两个模式也会默认一起创建，SYS,SYSTEM。 sys模式下存储数据字典，system存储显示管理信息的附加表和视图。 
  
  1.2表的种类：
     1.relational tables 关系表
       关系表有两种类型：
        1.heap-organized table 
          堆组织表就是普通的表，create table..不以特定的顺序存储行，也就是说数据是无序的。
        2.index-organized table 
          索引组织表，数据是有序的。
        3.external tables 
          外部表，元数据(即表结构什么的)存储在数据库中，但是数据存储在数据库之外。  
     2.objects tables 对象表
    表可以是permanent(永久的)或者temporary(临时的)。
    永久表与临时表的区别是，元数据都是一样永久定义的，但是永久表的数据永久存在，而临时表的数据只存在与会话或者事务中。   
      
   虚拟列：是某个列上的表达式或者函数，不占用磁盘空间。例如，income字段就是sal跟commission_pct的虚拟列。   
      
 1.3字段的数据类型：character numberic datetime rowid 
   varchar2跟char类型值的比较，
   Oracle Database compares VARCHAR2 values using nonpadded comparison semantics and compares CHAR values using blank-padded comparison semantics.
   oracle将varchar2填充空白然后再跟char进行比较。
   
   The NCHAR and NVARCHAR2 data types store Unicode character data. 
   Unicode is a universal encoded character set that can store information in any language using a single character set.
   NCHAR stores fixed-length character strings that correspond to the national character set, 
   whereas NVARCHAR2 stores variable length character strings.  
   --NCHAR 跟NVARCHAR2存储Unicode字符数据。
   --Unicode是一种通用编码字符集，可以用单个字符集存储任何语言中的信息。
   --NCHAR存储固定长度的字符串对应的国家字符集，而NVARCHAR2存储可变长度的字符串
   
   nvarcahr2跟varchar2的区别：
   nvarchar2(10) 不论存什么都可以存十个。
   varchar2(10) 可以存5个汉字或者10个英文字母。
   
   RR跟YY的区别：
   如果现在是1999年 09 RR会翻译成2009 YY会翻译成1909.RR的意思是离当前时间最近的时间，YY仅仅是本世纪的年份。
   24小时格式 HH:MI:SS
   
   全局临时表
    表的元数据存储在数据字典中，表的数据只在当前会话或者事务中插入可见，当结束事务或者会话时，数据消失。数据存储在临时段中，将会在事务或者会话结束时回收。
    /***************************************************************************************************************/
    Because temporary tables are statically defined, you can create indexes for them with the CREATE INDEX statement. 
    Indexes created on temporary tables are also temporary. 
    The data in the index has the same session or transaction scope as the data in the temporary table. 
    You can also create a view or trigger on a temporary table.
    Temporary segments are deallocated at the end of the transaction for transaction-specific temporary tables and 
    at the end of the session for session-specific temporary tables.
    /**************************************************************************************************************/
    create global temporary table ... on commit
   
   External table 外部表
   表结构在数据库中，但是数据在数据库之外。可通过sql，pl/sql，java访问数据。通常在数据仓库环境，ETL任务中使用。
   sql*loader，sqldump就是使用的外部表。
   外部表不支持索引，虚拟列，列对象，且外部表是只读的。
   CREATE TABLE ... ORGANIZATION EXTERNAL --创建外部表
   
   压缩表，所有列的一行数据存储在一起。压缩的级别，表空间，表，分区，子分区。如果在表空间上压缩了，那么该表空间下的表都是压缩的。
   
   table clusters 
   聚簇：如果一组表有一些共同的列，则将这样一组表存储在相同的数据库块中;聚簇还表示把相关的数据存储在同一个块上。
   利用聚簇，一个块可能包含多个表的数据。
   概念上就是如果两个或多个表经常做链接操作，那么可以把需要的数据预先存储在一起。
   聚簇还可以用于单个表，可以按某个列将数据分组存储。
   cluster key(集群键)是几张表所共有的列，列如emp 跟department cluster key就是dept_id.
   
   优势：
   减少磁盘I/O
   减少访问时间
   节省磁盘空间
   劣势：
   频繁更新
   频繁全表扫描
   truncate
   
   
   表的种类
 1.堆组织表(heap orgnized table):就是普通的表，数据以堆的方式管理。
 2.索引组织表(index orgnized table):数据按照索引结构存储。
 3.嵌套表(nested table):可以认为emp是dept的子表，因为emp有个外键deptno指向dept。嵌套表与子表的区别是嵌套表不像子表那样是独立表。
 4.临时表(temporary table):
 5.外部表(external table):数据存放在操作系统文件中
 6.分区表(partition table):
   分区的好处：
   1.改善查询性能(分区消除)
   2.减少管理负担
   3.提高可用性(假如有100GB的表，分成10个区，其中某个10G的分区遭到破坏，修复时只要修复这个分区就可以了。
   4.分区可以独立查询，插入，删除，修改，重建索引，备份，和恢复。
   5.
   
  
  四种分区方法
  1.列表
   partition by list(A)
   (partition p1 values ('A','B','C'),
    partition p2 values ('d','e'))
  2.范围
    create table t()
    partition by range(A)
    (partition p1 values less than 100,
     partition p2 values less than maxvalue)
  3.hash
    create table t()
    partition by hash(t)
    (partition p1 tablespace t1,
     partition p2 tablespace t2)
    hash分区时，分区的个数最好是2的N次方个。 
  4.组合
  
  分区索引
  每个分区表都有一个分区索引，这叫局部索引。
 
 
 临时表用于保存事务或者会话期间的中间结果集。临时表中的数据，只有当前会话可见，其他会话不可见。
 临时表有两种：
 1.基于会话的
  create global temporary table temp_session
  on commit preserve rows
  as slect * from t where 1=0;
  
 2.基于事务的
  create global temporary table temp_trans
  on commit delete rows
  as select * from t where 1=0;
  临时表并不支持以下特性：
   不能引用完整性约束。不能创建外键。
   不能是IOT
   不能分区
   不能通过analyze生成统计信息

两种基本的数据访问途径：
  全扫描(全表扫描/快速全索引扫描)
  索引扫描
例子(出自，sql 高级编程)：
 t1存10000行，存储数据为0-9，存储方式为100个0,100个1.....
 t2存10000行，存储数据为0-9，存储方式为0-99,0-99,0-99...
   如果要查询值为1的数据
 t1表走索引，因为访问数据块都集中在一起。
 t2全扫描，因为数据分散，几乎访问了所有的数据块。
 
 全扫描是否高效取决于需要访问的数据块个数以及最终结果集的行数。 
高水位线(high-water-mark,HWM).
 随着数据的插入，高水位线会越来越高，但是删除(delete)数据并不会降低高水位线。直到重建或者截断表。
 Oracle全表扫描时，会扫描HWM之下所有的数据块，即使其中不包含任何数据，这回影响全表扫描的性能，尤其是HWM下空块较多的情况下。

表的连接方法：
  两张表连接，所访问的第一张表叫驱动表，第二张叫被驱表或者内层表。优化器通过统计信息和where子句中的筛选条件计算每个表返回多少行决定哪张是驱动表。
  预估最小，通常是数据块，或者返回行数最小的当作驱动表。
  
  1.嵌套循环连接 NESTS LOOP
    使用一次访问所得到的结果集的每一行来与另一个表进行连接。嵌套循环连接就是一个循环嵌套在另一个循环中。
  2.散列连接 HSAH join
    驱动表和被驱动表都只会被访问一次。只适用等值连接条件
    
  3.排序合并连接 SORT MERGE 
    对于每张表返回的行，按照连接键进行排序，然后对排序后的结果集进行合并。排序的开销会很大，内存不够时，会动用硬盘。合并的开销比较小。
  4.笛卡尔积连接

外链接：
 外链接需要外链接表作为驱动表。
 
 
 
abcd四张表连接，a先与b连接，c与ab连接的结果连接，d与abc连接的结果连接。
   
   
   
   
   
